using System;
using System.IO;
using System.Text;
using Newtonsoft.Json;

namespace PLCKeygen
{
    /// <summary>
    /// Quản lý cấu hình PLC, load từ JSON và generate code
    /// </summary>
    public class PLCConfigManager
    {
        private PLCConfig _config;
        public PLCConfig Config => _config;

        /// <summary>
        /// Load cấu hình PLC từ file JSON
        /// </summary>
        /// <param name="jsonFilePath">Đường dẫn đến file JSON</param>
        /// <returns>True nếu load thành công</returns>
        public bool LoadConfig(string jsonFilePath)
        {
            try
            {
                if (!File.Exists(jsonFilePath))
                {
                    throw new FileNotFoundException($"Không tìm thấy file cấu hình: {jsonFilePath}");
                }

                string jsonContent = File.ReadAllText(jsonFilePath, Encoding.UTF8);
                _config = JsonConvert.DeserializeObject<PLCConfig>(jsonContent);

                if (_config == null)
                {
                    throw new Exception("Không thể parse file JSON");
                }

                Console.WriteLine($"[PLCConfigManager] Đã load cấu hình: {_config.PLCName}");
                Console.WriteLine($"[PLCConfigManager] IP: {_config.IPAddress}:{_config.Port}");
                Console.WriteLine($"[PLCConfigManager] Input: {_config.Addresses.Input.Count} địa chỉ");
                Console.WriteLine($"[PLCConfigManager] Output: {_config.Addresses.Output.Count} địa chỉ");
                Console.WriteLine($"[PLCConfigManager] Data: {_config.Addresses.Data.Count} địa chỉ");

                return true;
            }
            catch (Exception ex)
            {
                Console.WriteLine($"[PLCConfigManager] Lỗi khi load config: {ex.Message}");
                return false;
            }
        }

        /// <summary>
        /// Generate file C# chứa constants cho các địa chỉ PLC
        /// </summary>
        /// <param name="outputFilePath">Đường dẫn file output .cs</param>
        /// <param name="className">Tên class sẽ được generate (mặc định: PLCAddresses)</param>
        public bool GenerateAddressesFile(string outputFilePath, string className = "PLCAddresses")
        {
            try
            {
                if (_config == null)
                {
                    throw new Exception("Chưa load config. Hãy gọi LoadConfig() trước.");
                }

                StringBuilder sb = new StringBuilder();

                // Header
                sb.AppendLine("//------------------------------------------------------------------------------");
                sb.AppendLine("// <auto-generated>");
                sb.AppendLine("//     File này được tạo tự động từ PLCConfig.json");
                sb.AppendLine($"//     Thời gian: {DateTime.Now:yyyy-MM-dd HH:mm:ss}");
                sb.AppendLine("//     KHÔNG CHỈNH SỬA TRỰC TIẾP FILE NÀY!");
                sb.AppendLine("// </auto-generated>");
                sb.AppendLine("//------------------------------------------------------------------------------");
                sb.AppendLine();
                sb.AppendLine("namespace PLCKeygen");
                sb.AppendLine("{");
                sb.AppendLine($"    /// <summary>");
                sb.AppendLine($"    /// Địa chỉ PLC được generate tự động từ {Path.GetFileName(outputFilePath)}");
                sb.AppendLine($"    /// PLC: {_config.PLCName} ({_config.IPAddress}:{_config.Port})");
                sb.AppendLine($"    /// </summary>");
                sb.AppendLine($"    public static class {className}");
                sb.AppendLine("    {");

                // PLC Info
                sb.AppendLine($"        public const string PLCName = \"{_config.PLCName}\";");
                sb.AppendLine($"        public const string IPAddress = \"{_config.IPAddress}\";");
                sb.AppendLine($"        public const int Port = {_config.Port};");
                sb.AppendLine();

                // Input addresses
                GenerateAddressClass(sb, "Input", _config.Addresses.Input, "Địa chỉ Input (đầu vào)");

                // Output addresses
                GenerateAddressClass(sb, "Output", _config.Addresses.Output, "Địa chỉ Output (đầu ra)");

                // Data addresses
                GenerateAddressClass(sb, "Data", _config.Addresses.Data, "Địa chỉ Data (dữ liệu)");

                // Close main class
                sb.AppendLine("    }");
                sb.AppendLine("}");

                // Write to file
                File.WriteAllText(outputFilePath, sb.ToString(), Encoding.UTF8);

                Console.WriteLine($"[PLCConfigManager] Đã generate file: {outputFilePath}");
                return true;
            }
            catch (Exception ex)
            {
                Console.WriteLine($"[PLCConfigManager] Lỗi khi generate file: {ex.Message}");
                return false;
            }
        }

        private void GenerateAddressClass(StringBuilder sb, string className, System.Collections.Generic.List<PLCAddressInfo> addresses, string description)
        {
            sb.AppendLine($"        /// <summary>");
            sb.AppendLine($"        /// {description}");
            sb.AppendLine($"        /// </summary>");
            sb.AppendLine($"        public static class {className}");
            sb.AppendLine("        {");

            foreach (var addr in addresses)
            {
                sb.AppendLine($"            /// <summary>");
                sb.AppendLine($"            /// {addr.DisplayName} - Kiểu: {addr.DataType}");
                sb.AppendLine($"            /// </summary>");
                sb.AppendLine($"            public const string {addr.Name} = \"{addr.Address}\";");
                sb.AppendLine();
            }

            sb.AppendLine("        }");
            sb.AppendLine();
        }

        /// <summary>
        /// Lấy PLCAddressInfo theo tên
        /// </summary>
        public PLCAddressInfo GetAddressInfo(string category, string name)
        {
            if (_config == null) return null;

            System.Collections.Generic.List<PLCAddressInfo> list = null;

            switch (category.ToLower())
            {
                case "input":
                    list = _config.Addresses.Input;
                    break;
                case "output":
                    list = _config.Addresses.Output;
                    break;
                case "data":
                    list = _config.Addresses.Data;
                    break;
            }

            return list?.Find(x => x.Name == name);
        }

        /// <summary>
        /// Tạo instance PLCKeyence từ config
        /// </summary>
        public PLCKeyence CreatePLCInstance()
        {
            if (_config == null)
            {
                throw new Exception("Chưa load config. Hãy gọi LoadConfig() trước.");
            }

            return new PLCKeyence(_config.IPAddress, _config.Port);
        }
    }
}
